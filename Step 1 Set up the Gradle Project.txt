import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;

public class PiiDataAccessInterceptor implements ResponseBodyAdvice<Object> {

    private static final Logger logger = LoggerFactory.getLogger(PiiDataAccessInterceptor.class);

    private final PiiLoggerProperties piiLoggerProperties;

    public PiiDataAccessInterceptor(PiiLoggerProperties piiLoggerProperties) {
        this.piiLoggerProperties = piiLoggerProperties;
    }

    @Override
    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {
        return true; // Apply for all responses
    }

    @Override
    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType,
                                   Class<? extends HttpMessageConverter<?>> selectedConverterType,
                                   ServerHttpRequest request, ServerHttpResponse response) {

        // Log the HTTP method (GET, POST, etc.)
        HttpMethod httpMethod = request.getMethod();
        logger.info("HTTP Method: {}", httpMethod);

        // Log the URI of the request
        String uri = request.getURI().toString();
        logger.info("Request URI: {}", uri);

        // Log the client class annotations (using reflection on the controller method or class)
        logClassAnnotations(returnType.getMethod());

        // Log status code of the response
        HttpStatus statusCode = response.getStatusCode();
        logger.info("Response Status Code: {}", statusCode);

        // Log headers
        logger.info("Request Headers: {}", request.getHeaders());
        logger.info("Response Headers: {}", response.getHeaders());

        // Optionally, log the request body if needed
        // logger.info("Request Body: {}", body);

        return body;  // Proceed with the response body
    }

    private void logClassAnnotations(Method method) {
        // Log annotations on the class or method
        Class<?> declaringClass = method.getDeclaringClass();
        Annotation[] classAnnotations = declaringClass.getAnnotations();

        logger.info("Annotations on class {}:", declaringClass.getName());
        for (Annotation annotation : classAnnotations) {
            logger.info("Class Annotation: {}", annotation.annotationType().getName());
        }

        Annotation[] methodAnnotations = method.getAnnotations();
        logger.info("Annotations on method {}:", method.getName());
        for (Annotation annotation : methodAnnotations) {
            logger.info("Method Annotation: {}", annotation.annotationType().getName());
        }
    }
}
