 public static Set<String> getTopLevelClasses(Message message) {
        Message actualMessage = unwrapIfNeeded(message);
        return extractTopLevelClasses(actualMessage);
    }

    private static Message unwrapIfNeeded(Message message) {
        // Check if the message is a wrapper
        List<Descriptors.FieldDescriptor> fields = message.getDescriptorForType().getFields();
        for (Descriptors.FieldDescriptor field : fields) {
            if (field.isRepeated() && field.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE) {
                List<?> repeatedField = (List<?>) message.getField(field);
                if (!repeatedField.isEmpty() && repeatedField.get(0) instanceof Message) {
                    return (Message) repeatedField.get(0); // Return the actual wrapped message
                }
            }
        }
        return message; // If no wrapper is found, return the original message
    }

    private static Set<String> extractTopLevelClasses(Message message) {
        Set<String> topClasses = new HashSet<>();
        List<Descriptors.FieldDescriptor> fields = message.getDescriptorForType().getFields();

        for (Descriptors.FieldDescriptor field : fields) {
            if (field.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE) {
                topClasses.add(field.getMessageType().getName()); // Add only top-level class names
            }
        }
        return topClasses;
    }
