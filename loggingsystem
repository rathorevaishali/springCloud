Updated Architecture
Here is the updated structure:

plaintext
Copy code
config/
    - AuditLoggingProperties.java
    - PiiLoggerProperties.java
core/
    validation/
        - Validator.java
        - ValidationRegistry.java
    logging/
        - LoggingHandler.java
        - LoggingClientFactory.java
        - ILoggingClient.java
        - FileLoggingClient.java
        - AuditLogger.java
    event/
        - AuditLoggingEvent.java
    handler/
        - PiiHandler.java
        - JerseyPiiHandler.java
        - ServletPiiHandler.java
        - GraphQLPiiHandler.java
        - PiiHandlerRegistry.java
    utils/
        - JsonUtils.java
        - ReflectionUtils.java
exception/
    - AuditLoggingException.java
aspect/
    - PiiAccessAspect.java
filter/
    - PiiLoggingFilter.java
Implementation of Classes
config/AuditLoggingProperties.java
Holds properties related to audit logging configuration.

java
Copy code
import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(prefix = "audit.logging")
public class AuditLoggingProperties {
    private String logFilePath;

    public String getLogFilePath() {
        return logFilePath;
    }

    public void setLogFilePath(String logFilePath) {
        this.logFilePath = logFilePath;
    }
}
config/PiiLoggerProperties.java
Holds PII logger-specific configurations.

java
Copy code
import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(prefix = "pii.logger")
public class PiiLoggerProperties {
    private boolean enabled;

    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }
}
core/validation/Validator.java
Defines validation logic for data.

java
Copy code
public interface Validator<T> {
    boolean validate(T data);
}
core/validation/ValidationRegistry.java
Holds multiple validators and allows retrieving them dynamically.

java
Copy code
import java.util.List;

public class ValidationRegistry {
    private final List<Validator<?>> validators;

    public ValidationRegistry(List<Validator<?>> validators) {
        this.validators = validators;
    }

    public Validator<?> getValidator(Class<?> type) {
        return validators.stream()
                .filter(validator -> validator.getClass().isAssignableFrom(type))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("No validator found for type: " + type));
    }
}
core/logging/ILoggingClient.java
Defines the interface for logging clients.

java
Copy code
public interface ILoggingClient {
    void log(String message);
}
core/logging/FileLoggingClient.java
File-based implementation of the logging client.

java
Copy code
import java.io.FileWriter;
import java.io.IOException;

public class FileLoggingClient implements ILoggingClient {
    private final String logFilePath;

    public FileLoggingClient(String logFilePath) {
        this.logFilePath = logFilePath;
    }

    @Override
    public void log(String message) {
        try (FileWriter writer = new FileWriter(logFilePath, true)) {
            writer.write(message + "\n");
        } catch (IOException e) {
            throw new RuntimeException("Failed to log message", e);
        }
    }
}
core/logging/AuditLogger.java
Centralized class for logging audit events.
public class FileAuditLogger implements AuditLogger {
    private static final Logger piiLogger = LoggerFactory.getLogger("PII_LOGGER");

    @Override
    public void logEvent(AuditEvent event) {
        piiLogger.info("Audit Event: {}", event.getDetails());
    }
}
java
Copy code
public class AuditLogger {
    private final ILoggingClient loggingClient;

    public AuditLogger(ILoggingClient loggingClient) {
        this.loggingClient = loggingClient;
    }

    public void logEvent(AuditLoggingEvent event) {
        loggingClient.log(event.toString());
    }
}
core/event/AuditLoggingEvent.java
Represents a single audit log event.

java
Copy code
public class AuditLoggingEvent {
    private String timestamp;
    private String userId;
    private String accessedData;
    private String ipAddress;

    // Getters and setters

    @Override
    public String toString() {
        return String.format("Timestamp: %s, UserId: %s, Data: %s, IP: %s",
                timestamp, userId, accessedData, ipAddress);
    }
}
core/handler/PiiHandler.java
Defines the handler interface.

java
Copy code
public interface PiiHandler {
    boolean supports(Object request);
    void handleRequest(Object request);
    void handleResponse(Object request, Object response);
}
core/handler/JerseyPiiHandler.java
Handles PII for Jersey requests.

java
Copy code
import jakarta.ws.rs.container.ContainerRequestContext;
import jakarta.ws.rs.container.ContainerResponseContext;

public class JerseyPiiHandler implements PiiHandler {
    private final AuditLogger auditLogger;

    public JerseyPiiHandler(AuditLogger auditLogger) {
        this.auditLogger = auditLogger;
    }

    @Override
    public boolean supports(Object request) {
        return request instanceof ContainerRequestContext;
    }

    @Override
    public void handleRequest(Object request) {
        // Handle request-specific logic
    }

    @Override
    public void handleResponse(Object request, Object response) {
        if (response instanceof ContainerResponseContext) {
            // Process and log response data
        }
    }
}
core/handler/PiiHandlerRegistry.java
Manages the mapping of handlers.

java
Copy code
import java.util.List;

public class PiiHandlerRegistry {
    private final List<PiiHandler> handlers;

    public PiiHandlerRegistry(List<PiiHandler> handlers) {
        this.handlers = handlers;
    }

    public PiiHandler getHandler(Object request) {
        return handlers.stream()
                .filter(handler -> handler.supports(request))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("No handler found for request type: " + request.getClass()));
    }
}
exception/AuditLoggingException.java
Custom exception for logging errors.

java
Copy code
public class AuditLoggingException extends RuntimeException {
    public AuditLoggingException(String message) {
        super(message);
    }

    public AuditLoggingException(String message, Throwable cause) {
        super(message, cause);
    }
}
aspect/PiiAccessAspect.java
Intercepts annotated methods for logging.

java
Copy code
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.ProceedingJoinPoint;

@Aspect
public class PiiAccessAspect {
    private final PiiHandlerRegistry handlerRegistry;

    public PiiAccessAspect(PiiHandlerRegistry handlerRegistry) {
        this.handlerRegistry = handlerRegistry;
    }

    @Around("@annotation(PiiAccess)")
    public Object logPiiAccess(ProceedingJoinPoint joinPoint) throws Throwable {
        Object[] args = joinPoint.getArgs();

        // Pre-processing
        PiiHandler handler = handlerRegistry.getHandler(args[0]);
        handler.handleRequest(args[0]);

        // Proceed with method
        Object response = joinPoint.proceed();

        // Post-processing
        handler.handleResponse(args[0], response);

        return response;
    }
}
filter/PiiLoggingFilter.java
Filter-based approach for non-Spring frameworks.

java
Copy code
import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;

public class PiiLoggingFilter implements Filter {
    private final PiiHandlerRegistry handlerRegistry;

    public PiiLoggingFilter(PiiHandlerRegistry handlerRegistry) {
        this.handlerRegistry = handlerRegistry;
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {
        PiiHandler handler = handlerRegistry.getHandler(request);
        handler.handleRequest(request);

        // Continue request flow
        chain.doFilter(request, response);

        handler.handleResponse(request, response);
    }
}


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileLoggingClient implements ILoggingClient {
    private final Logger logger;

    /**
     * Initializes the FileLoggingClient with a logger for the specific category.
     * 
     * @param logCategory The category or name for the logger (e.g., "PII_LOGGER").
     */
    public FileLoggingClient(String logCategory) {
        this.logger = LoggerFactory.getLogger(logCategory);
    }

    @Override
    public void log(String message) {
        logger.info(message); // Logs the message at the INFO level
    }
}


import org.springframework.http.ResponseEntity;

public class SpringRestPiiHandler implements PiiHandler {
    private final AuditLogger auditLogger;

    public SpringRestPiiHandler(AuditLogger auditLogger) {
        this.auditLogger = auditLogger;
    }

    @Override
    public boolean supports(Object request) {
        // Check if the request is specific to Spring Boot (e.g., ResponseEntity)
        return request instanceof ResponseEntity;
    }

    @Override
    public void handleRequest(Object request) {
        // Optionally, handle request-specific logging if needed
        System.out.println("Spring REST request intercepted.");
    }

    @Override
    public void handleResponse(Object request, Object response) {
        if (response instanceof ResponseEntity) {
            ResponseEntity<?> responseEntity = (ResponseEntity<?>) response;

            // Log the response body (if it contains PII)
            Object responseBody = responseEntity.getBody();
            if (responseBody != null) {
                AuditLoggingEvent event = new AuditLoggingEvent();
                event.setTimestamp(String.valueOf(System.currentTimeMillis()));
                event.setUserId("User from Spring");
                event.setAccessedData(responseBody.toString());
                event.setIpAddress("127.0.0.1");
                auditLogger.logEvent(event);
            }
        }
    }
}
@Configuration
public class PiiHandlerConfig {
    @Bean
    public PiiHandlerRegistry piiHandlerRegistry(AuditLogger auditLogger) {
        return new PiiHandlerRegistry(
            List.of(
                new JerseyPiiHandler(auditLogger),
                new ServletPiiHandler(auditLogger),
                new GraphQLPiiHandler(auditLogger),
                new SpringRestPiiHandler(auditLogger)
            )
        );
    }
}



    private final PiiHandlerRegistry registry;

    public PiiAccessAspect(AuditLogger auditLogger) {
        this.registry = new PiiHandlerRegistry(
            List.of(
                new JerseyPiiHandler(auditLogger),
                new ServletPiiHandler(auditLogger),
                new GraphQLPiiHandler(auditLogger),
                new SpringRestPiiHandler(auditLogger)
            )
        );
    }



google.protobuf.BoolValue has_loan_with_ameriprise_bank = 3090 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.StringValue loan_with_ameriprise_explanation = 3091 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.BoolValue has_given_consent_to_share_with_household = 3095 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BEHAVIORAL_INFO];
google.protobuf.StringValue wm_business_unit = 3096 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BACKGROUND_INFO];
google.protobuf.BoolValue is_subject_to_amt = 4000 [(util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
google.protobuf.BoolValue avoid_amt_securities = 4003 [(util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
google.protobuf.BoolValue expects_other_long_term_realized_gains = 4004 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.BoolValue expects_other_short_term_realized_gains = 4005 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.DoubleValue ordinary_tax_rate = 4006 [(util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
google.protobuf.DoubleValue long_term_tax_rate = 4007 [(util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
google.protobuf.DoubleValue marginal_tax_rate = 4008 [(util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
repeated google.protobuf.StringValue document_linkage_ids = 4020 [(util.field_info).className = "core.document.DocumentLinkage", (util.field_info).isPii = true, (util.field_info).typeOfPii = DIGITAL_IDENTIFIER];
string first_name = 10 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: FIRST_NAME}, (util.field_info).typeOfPii = NAME];
google.protobuf.StringValue middle_name = 11 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: MIDDLE_NAME}, (util.field_info).typeOfPii = NAME];
string last_name = 12 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: LAST_NAME}, (util.field_info).typeOfPii = NAME];
google.protobuf.StringValue prefix = 13 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: DEFAULT}, (util.field_info).typeOfPii = NAME];
google.protobuf.StringValue suffix = 14 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: SUFFIX}, (util.field_info).typeOfPii = NAME];
Gender gender = 15 [(util.field_info).isPii = true, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
repeated google.protobuf.StringValue additional_countries_of_nationality = 4014 [(util.field_info).isPii = true, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
google.protobuf.StringValue country_of_birth = 4006 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: ADDRESS_COUNTRY}, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
google.protobuf.StringValue state_of_birth = 4007 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: ADDRESS_STATE}, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
google.protobuf.StringValue city_of_birth = 4008 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: ADDRESS_CITY}, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
util.Date date_of_birth = 100 [(util.field_info).isPii = true, (util.field_info).validationFields = {allowOnOrBefore: CURRENT_DATE}, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
util.Date date_of_death = 101 [(util.field_info).isPii = true, (util.field_info).validationFields = {allowOnOrBefore: CURRENT_DATE}, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
optional core.party.MaritalStatus marital_status = 19 [(util.field_info).isPii = true, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
repeated core.Identifier identifications = 25 [(util.field_info).isPii = true, (util.field_info).typeOfPii = DIGITAL_IDENTIFIER];
google.protobuf.StringValue name_for_correspondence = 27 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: FULL_NAME}, (util.field_info).typeOfPii = NAME];
google.protobuf.StringValue preferred_nickname = 28 [(util.field_info).isPii = true, (util.field_info).typeOfPii = NAME];
google.protobuf.StringValue preferred_nickname_non_roman_text = 29 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: UNICODE}, (util.field_info).typeOfPii = NAME];
google.protobuf.Timestamp marriage_date = 1002 [(util.field_info).isPii = true, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
google.protobuf.BoolValue is_employed_by_ameriprise_bank_or_affiliate = 3006 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BACKGROUND_INFO];
google.protobuf.StringValue employer_name = 2 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: COMPANY_NAME}, (util.field_info).typeOfPii = BACKGROUND_INFO];
google.protobuf.StringValue position = 6 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: DEFAULT}, (util.field_info).typeOfPii = BACKGROUND_INFO];
google.protobuf.StringValue employee_id = 7 [deprecated = true, (util.field_info).isPii = true, (util.field_info).typeOfPii = INTERNAL_GS_ID];
GSEmployeeDetails gs_employee_details = 3007 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BACKGROUND_INFO];
google.protobuf.StringValue source_of_wealth_summary = 3092 [(util.field_info).isPii = true, (util.field_info).typeOfPii = SENSITIVE_PERSONAL_FINANCIAL_INFO];
google.protobuf.StringValue annual_income = 3022 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.BoolValue advisor_attests_party_is_minor = 3023 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BEHAVIORAL_INFO];
google.protobuf.BoolValue advisor_attests_party_is_deceased = 3024 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BEHAVIORAL_INFO];
google.protobuf.BoolValue is_investment_advisor = 61 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BEHAVIORAL_INFO];
google.protobuf.BoolValue files_private_fund_advisor_form = 62 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BACKGROUND_INFO];
google.protobuf.StringValue emploee_type = 64 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BACKGROUND_INFO];
google.protobuf.BoolValue files_private_fund_advisor_form = 62 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BEHAVIORAL_INFO];
google.protobuf.StringValue emma_legal_name = 15 [(util.field_info).isPii = true, (util.field_info).typeOfPii = NAME];
ConsentRelationshipAttributes consent_relationship_attributes = 3001 [deprecated = true, (util.field_info).isPii = true, (util.field_info).typeOfPii = RELATIONSHIP_INFO];
google.protobuf.StringValue company_name = 4 [deprecated = true, (util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: COMPANY_NAME}, (util.field_info).typeOfPii = CORP_CONTACT_INFO];
google.protobuf.StringValue tax_id = 6 [deprecated = true, (util.field_info).isPii = true,(util.field_info).typeOfPii = GOVT_ID];
string id = 1 [(util.field_info).isPii = true, (util.field_info).typeOfPii = INTERNAL_GS_ID];
Consent entity_disclosure = 14 [(util.field_info).isPii = true, (util.field_info).typeOfPii = BEHAVIORAL_INFO];
Consent joint_credit = 15 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
Consent broker_dealer_consent = 16 [(util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
string name = 1001 [(util.field_info).isPii = true, (util.field_info).typeOfPii = NAME];
string acct_id = 20 [(util.field_info).className = "core.account.PrimaryAccount", (util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
repeated google.protobuf.StringValue document_linkage_ids = 90 [(util.field_info).className = "core.document.DocumentLinkage", (util.field_info).isPii = true, (util.field_info).typeOfPii = DIGITAL_IDENTIFIER];
repeated string party_account_role_ids = 12 [(util.field_info).className = "core.PartyAccountRole", (util.field_info).isPii = true, (util.field_info).typeOfPii = INTERNAL_GS_ID];
repeated string rep_team_role_ids = 13 [(util.field_info).className = "core.PartyAccountRole", (util.field_info).isPii = true, (util.field_info).typeOfPii = INTERNAL_GS_ID];
repeated string client_account_ids = 4002 [(util.field_info).className = "core.account.ClientAccount", (util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
string primary_party_id = 2004 [(util.field_info).className = "core.party.Party", (util.field_info).isPii = true, (util.field_info).typeOfPii = INTERNAL_GS_ID];
repeated string source_of_funds_ids = 3004 [(util.field_info).className = "core.account.SourceOfFunds", (util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
repeated string welcome_primary_account_ids = 2017 [(util.field_info).className = "core.welcomeExperience.WelcomePrimaryAccount", (util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
string application_id = 2018 [(util.field_info).className = "core.application.Application", (util.field_info).isPii = true, (util.field_info).typeOfPii = DIGITAL_IDENTIFIER];
repeated string tax_document_ids = 2033 [(util.field_info).className = "core.account.AccountTaxDocument", (util.field_info).isPii = true, (util.field_info).typeOfPii = GOVT_ID];
repeated string commission_ids = 3041 [(util.field_info).className = "core.account.Commission", (util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
repeated string pbc_sow_required_party_ids = 3044 [(util.field_info).className = "core.party.Party", (util.field_info).isPii = true, (util.field_info).typeOfPii = INTERNAL_GS_ID];
repeated string fee_program_ids = 4001 [(util.field_info).className = "core.party.Party", (util.field_info).isPii = true, (util.field_info).typeOfPii = INTERNAL_GS_ID];
repeated string billing_fee_ids = 4015 [(util.field_info).className = "core.account.FeeProgram", (util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.StringValue group_name = 40 [(util.field_info).className = "core.document.DocumentLinkage", (util.field_info).isPii = true, (util.field_info).typeOfPii = NAME];
repeated string state_tax_domicile_ids = 3028 [(util.field_info).className = "core.account.SubAccountStateDomicile", (util.field_info).isPii = true, (util.field_info).typeOfPii = ADDRESS];
repeated string application_relationship_ids = 32 [(util.field_info).className = "core.application.ApplicationRelationship", (util.field_info).isPii = true, (util.field_info).typeOfPii = RELATIONSHIP_INFO];
google.protobuf.StringValue party_id = 20 [(util.field_info).className = "core.party.Party", (util.field_info).isPii = true, (util.field_info).typeOfPii = INTERNAL_GS_ID];
google.protobuf.StringValue primary_account_id = 30 [(util.field_info).className = "core.account.PrimaryAccount", (util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
google.protobuf.StringValue client_account_id = 40 [(util.field_info).className = "core.account.ClientAccount", (util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
google.protobuf.StringValue sub_account_id = 50 [(util.field_info).className = "core.account.SubAccount", (util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
google.protobuf.StringValue top_account_id = 60 [(util.field_info).className = "core.account.TopAccount", (util.field_info).isPii = true, (util.field_info).typeOfPii = FINANCIAL_ACCT_NO];
google.protobuf.StringValue document_image_id = 70 [(util.field_info).className = "core.document.DocumentImage", (util.field_info).isPii = true, (util.field_info).typeOfPii = DIGITAL_IDENTIFIER];
repeated google.protobuf.StringValue document_section_ids = 80 [(util.field_info).className = "core.document.DocumentSection", (util.field_info).isPii = true, (util.field_info).typeOfPii = DIGITAL_IDENTIFIER];
string name = 11 [(util.field_info).isPii = true, (util.field_info).validationFields = {regexFieldType: COMPANY_NAME}, (util.field_info).typeOfPii = NAME];
google.protobuf.StringValue client_web_login = 2002 [(util.field_info).isPii = true, (util.field_info).typeOfPii = DIGITAL_IDENTIFIER];
string gs_affiliation_person_name = 3014 [(util.field_info).isPii = true, (util.field_info).typeOfPii = NAME];
google.protobuf.StringValue emma_id = 3070 [(util.field_info).isPii = true, (util.field_info).typeOfPii = DIGITAL_IDENTIFIER];
google.protobuf.BoolValue is_gsbe_related_party = 3093 [(util.field_info).isPii = true, (util.field_info).typeOfPii = RELATIONSHIP_INFO];
google.protobuf.StringValue gsbe_relationship_details = 3094 [(util.field_info).isPii = true, (util.field_info).typeOfPii = RELATIONSHIP_INFO];
google.protobuf.BoolValue is_fatca_us_person = 3097 [(util.field_info).isPii = true, (util.field_info).typeOfPii = DEMOGRAPHIC_INFO];
google.protobuf.BoolValue has_loan_with_gs_bank = 3088 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.StringValue loan_with_gs_bank_explanation = 3089 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.BoolValue has_loan_with_ameriprise_bank = 3090 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];
google.protobuf.StringValue loan_with_ameriprise_explanation = 3091 [(util.field_info).isPii = true, (util.field_info).typeOfPii = PERSONAL_FINANCIAL_INFO];

