import com.google.protobuf.Descriptors;
import com.google.protobuf.Message;
import java.util.*;

public class IdFieldCounter {
    private static final String COUNT = "count";
    private static final String CLASSES = "classes";
    private static final String ID_FIELD_NAME = "id";

    public Map<String, Object> countIdFields(Message message) {
        return countIdFields(message, new IdentityHashMap<>(), false);
    }

    private Map<String, Object> countIdFields(Object message, final Map<Object, Boolean> processedMessages, boolean checkNestedForId) {
        if (!(message instanceof Message protoMessage)) {
            return Map.of(COUNT, 0, CLASSES, new ArrayList<String>());
        }

        // Prevent infinite loops using IdentityHashMap
        if (processedMessages.containsKey(protoMessage)) {
            return Map.of(COUNT, 0, CLASSES, new ArrayList<String>());
        }
        processedMessages.put(protoMessage, true);

        int idFieldCount = 0;
        final List<String> classNames = new ArrayList<>();

        // Get all fields of the current message
        final List<Descriptors.FieldDescriptor> fields = protoMessage.getDescriptorForType().getFields();
        boolean hasIdField = false;

        for (Descriptors.FieldDescriptor field : fields) {
            if (ID_FIELD_NAME.equals(field.getName())) {
                hasIdField = true;
                idFieldCount++;
                classNames.add(protoMessage.getClass().getSimpleName());
            }

            // Check if field is repeated
            if (field.isRepeated()) {
                final List<?> repeatedField = (List<?>) protoMessage.getField(field);
                for (Object item : repeatedField) {
                    if (item instanceof Message) {
                        final Map<String, Object> nestedResult = countIdFields(item, processedMessages, false);
                        idFieldCount += (int) nestedResult.get(COUNT);
                        classNames.addAll((List<String>) nestedResult.get(CLASSES));
                    }
                }
                continue;
            }

            // Skip Wrapper Objects (like PrimaryAccountDataResponse)
            if (field.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE) {
                final Object nestedField = protoMessage.getField(field);
                if (nestedField instanceof Message) {
                    final Map<String, Object> nestedResult = countIdFields(nestedField, processedMessages, true);
                    idFieldCount += (int) nestedResult.get(COUNT);
                    classNames.addAll((List<String>) nestedResult.get(CLASSES));
                }
            }
        }

        return Map.of(COUNT, idFieldCount, CLASSES, classNames);
    }
}


public static Set<String> getTopLevelClasses(Message message) {
        Set<String> topClasses = new HashSet<>();

        // Get all fields of the message
        List<Descriptors.FieldDescriptor> fields = message.getDescriptorForType().getFields();

        for (Descriptors.FieldDescriptor field : fields) {
            // Check if the field type is a Message (i.e., another class)
            if (field.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE) {
                topClasses.add(field.getMessageType().getName()); // Add only the direct class name
            }
        }
        return topClasses;
    }
