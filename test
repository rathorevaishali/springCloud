import com.google.protobuf.Descriptors;
import com.google.protobuf.Message;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class ProtoPrivacyTagExtractor {

    private final Map<String, Set<String>> privacyTagConfig = new HashMap<>();
    private final Set<String> nonPiiDefaultAllowList = Set.of("exampleField1", "exampleField2");

    public Map<String, Set<String>> extractPrivacyTags(final Object protoObject) {
        if (protoObject instanceof final Message protoMessage) {
            final String className = protoMessage.getClass().getName();

            // If already cached, return existing privacyTagConfig
            if (privacyTagConfig.containsKey(className) && !privacyTagConfig.get(className).isEmpty()) {
                return privacyTagConfig;
            }

            final Set<String> allowedAttributes = new HashSet<>();

            // Process fields
            final List<Descriptors.FieldDescriptor> allFields = protoMessage.getDescriptorForType().getFields();
            for (final Descriptors.FieldDescriptor fieldDescriptor : allFields) {
                switch (fieldDescriptor.getJavaType()) {
                    case MESSAGE:
                        // Handle nested objects
                        final Object nestedFieldValue = protoMessage.getField(fieldDescriptor);
                        if (fieldDescriptor.isRepeated()) {
                            // Repeated nested objects (list of messages)
                            if (nestedFieldValue instanceof List<?>) {
                                for (Object nested : (List<?>) nestedFieldValue) {
                                    if (nested instanceof Message) {
                                        allowedAttributes.addAll(processNestedMessage(fieldDescriptor, (Message) nested));
                                    }
                                }
                            }
                        } else if (nestedFieldValue instanceof Message) {
                            // Single nested object
                            allowedAttributes.addAll(processNestedMessage(fieldDescriptor, (Message) nestedFieldValue));
                        }
                        break;

                    case STRING:
                    case INT:
                    case BOOL:
                    case DOUBLE:
                        // Handle primitive fields
                        if (isFieldPii(fieldDescriptor)) {
                            allowedAttributes.add(fieldDescriptor.getJsonName());
                        }
                        break;

                    case ENUM:
                        // Handle enums if needed
                        if (isFieldPii(fieldDescriptor)) {
                            allowedAttributes.add(fieldDescriptor.getJsonName());
                        }
                        break;

                    case MAP:
                        // Handle map fields
                        final Map<?, ?> mapValue = (Map<?, ?>) protoMessage.getField(fieldDescriptor);
                        mapValue.forEach((key, value) -> {
                            if (value instanceof Message) {
                                allowedAttributes.addAll(processNestedMessage(fieldDescriptor, (Message) value));
                            } else {
                                if (isFieldPii(fieldDescriptor)) {
                                    allowedAttributes.add(fieldDescriptor.getJsonName());
                                }
                            }
                        });
                        break;

                    default:
                        // Other types can be ignored or handled separately
                        break;
                }
            }

            privacyTagConfig.put(className, allowedAttributes);
            return privacyTagConfig;
        }

        return Collections.emptyMap();
    }

    private Set<String> processNestedMessage(Descriptors.FieldDescriptor fieldDescriptor, Message nestedMessage) {
        Set<String> nestedAttributes = new HashSet<>();
        extractPrivacyTags(nestedMe
