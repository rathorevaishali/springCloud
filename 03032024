package com.example;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.example.logging.AuditLoggingEventFactory;
import com.example.logging.LoggingClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

@WebMvcTest
@ExtendWith(MockitoExtension.class)
public class GenericErrorHandlerTest {

    @Autowired
    private MockMvc mockMvc;

    @Mock
    private LoggingClient loggingClient;

    @Mock
    private AuditLoggingEventFactory auditLoggingEventFactory;

    @InjectMocks
    private GenericErrorHandler genericErrorHandler;

    @BeforeEach
    void setup() {
        genericErrorHandler = new GenericErrorHandler(loggingClient, auditLoggingEventFactory);
    }

    @Test
    void testHandleResponse_logsAuditEvent() throws Exception {
        ResponseEntity<String> response = new ResponseEntity<>("Error occurred", HttpStatus.INTERNAL_SERVER_ERROR);

        mockMvc.perform(MockMvcRequestBuilders.get("/test-error"))
                .andExpect(status().isInternalServerError());

        verify(loggingClient, atLeastOnce()).logEvent(any());
    }

    @Test
    void testSupports_returnsTrueForServerError() {
        boolean supports = genericErrorHandler.supports(GenericErrorHandler.class.getMethods()[0]);
        assert (supports);
    }
}
package com.gs.wm.rails.pii.logging;

import com.google.protobuf.Descriptors;
import com.google.protobuf.Message;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Component
public class PiiFieldIdentifier {
    private static final Set<String> NON_PII_DEFAULT_ALLOW_LIST = Set.of("id");

    public Set<String> getPrivacyTagsForMessage(final Message message) {
        Set<String> allowedAttributes = new HashSet<>();
        List<Descriptors.FieldDescriptor> fields = message.getDescriptorForType().getFields();

        for (Descriptors.FieldDescriptor field : fields) {
            if (isPiiField(field)) {
                String privacyTag = getPrivacyTagFromField(field);
                if (isValidPrivacyTag(privacyTag)) {
                    allowedAttributes.add(privacyTag);
                }
            }

            if (field.isRepeated()) {
                List<?> repeatedField = (List<?>) message.getField(field);
                for (Object item : repeatedField) {
                    if (item instanceof Message) {
                        allowedAttributes.addAll(getPrivacyTagsForMessage((Message) item));
                    }
                }
            } else if (field.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE) {
                Object nestedField = message.getField(field);
                if (nestedField instanceof Message) {
                    allowedAttributes.addAll(getPrivacyTagsForMessage((Message) nestedField));
                }
            }
        }
        return allowedAttributes;
    }

    private boolean isPiiField(final Descriptors.FieldDescriptor field) {
        return field.getOptions().getAllFields().values().stream()
                .anyMatch(value -> value instanceof FieldInfoOption && ((FieldInfoOption) value).hasIsPii() && ((FieldInfoOption) value).getIsPii());
    }

    private String getPrivacyTagFromField(final Descriptors.FieldDescriptor field) {
        FieldInfoOption infoOption = (FieldInfoOption) field.getOptions().getAllFields().values().stream()
                .filter(value -> value instanceof FieldInfoOption)
                .findFirst()
                .orElse(null);
        return infoOption != null ? infoOption.getPiiPrivacyTag().toString() : "";
    }

    private boolean isValidPrivacyTag(final String privacyTag) {
        return privacyTag != null && !privacyTag.isEmpty();
    }
}


private boolean getFieldOptionsPii(final Descriptors.FieldDescriptor fd) {
    boolean isAllowed = false;

    if (!fd.getOptions().getAllFields().isEmpty()) {
        for (final Map.Entry<?, ?> entry : fd.getOptions().getAllFields().entrySet()) {
            if (entry.getValue() instanceof FieldInfoOption infoOption) {
                // **Prevent infinite recursion**
                if (!isAllowed) { 
                    isAllowed = getOptionsPii(fd, infoOption);
                }
            }
        }
    }
    return isAllowed;
}


private Set<String> getPrivacyTagsForMessage(final Message rootMessage) {
    Set<String> allowedAttributes = new HashSet<>();
    Queue<Message> queue = new LinkedList<>();
    queue.add(rootMessage); // Start with the root message

    while (!queue.isEmpty()) {
        Message message = queue.poll(); // Process one message at a time
        List<Descriptors.FieldDescriptor> fields = message.getDescriptorForType().getFields();

        for (Descriptors.FieldDescriptor field : fields) {
            // Check if the field has PII and get the privacy tag
            if (getFieldOptionsPii(field)) {
                String privacyTag = getPrivacyTagFromField(field);
                if (isValidPrivacyTag(privacyTag)) {
                    allowedAttributes.add(privacyTag);
                }
            }

            // If the field is a repeated list of messages, add them to the queue
            if (field.isRepeated()) {
                List<?> repeatedField = (List<?>) message.getField(field);
                for (Object item : repeatedField) {
                    if (item instanceof Message) {
                        queue.add((Message) item);
                    }
                }
            }
            // If the field is a nested message, add it to the queue
            else if (field.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE) {
                Object nestedField = message.getField(field);
                if (nestedField instanceof Message) {
                    queue.add((Message) nestedField);
                }
            }
        }
    }
    return allowedAttributes;
}


private boolean isPiiField(final Descriptors.FieldDescriptor field) {
    if (field.getOptions() == null || field.getOptions().getAllFields().isEmpty()) {
        return false; // No options present
    }

    return field.getOptions().getAllFields().values().stream()
            .filter(value -> value instanceof FieldInfoOption)
            .map(value -> (FieldInfoOption) value)
            .anyMatch(option -> option.hasIsPii() && option.getIsPii());
}


package com.gs.wm.rails.pii.logging;

import com.google.protobuf.Descriptors;
import com.google.protobuf.Message;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Component
public class PiiFieldIdentifier {
    private static final Set<String> NON_PII_DEFAULT_ALLOW_LIST = Set.of("id");

    public Set<String> getPrivacyTagsForMessage(final Message message) {
        Set<String> allowedAttributes = new HashSet<>();
        List<Descriptors.FieldDescriptor> fields = message.getDescriptorForType().getFields();

        for (Descriptors.FieldDescriptor field : fields) {
            if (isPiiField(field)) {
                String privacyTag = getPrivacyTagFromField(field);
                if (isValidPrivacyTag(privacyTag)) {
                    allowedAttributes.add(privacyTag);
                }
            }

            if (field.isRepeated()) {
                List<?> repeatedField = (List<?>) message.getField(field);
                for (Object item : repeatedField) {
                    if (item instanceof Message) {
                        allowedAttributes.addAll(getPrivacyTagsForMessage((Message) item));
                    }
                }
            } else if (field.getJavaType() == Descriptors.FieldDescriptor.JavaType.MESSAGE) {
                Object nestedField = message.getField(field);
                if (nestedField instanceof Message) {
                    allowedAttributes.addAll(getPrivacyTagsForMessage((Message) nestedField));
                }
            }
        }
        return allowedAttributes;
    }

    private boolean isPiiField(final Descriptors.FieldDescriptor field) {
        if (field.getOptions() == null || field.getOptions().getAllFields().isEmpty()) {
            return false; // No options present
        }

        return field.getOptions().getAllFields().values().stream()
                .filter(value -> value instanceof FieldInfoOption)
                .map(value -> (FieldInfoOption) value)
                .anyMatch(option -> option.hasIsPii() && option.getIsPii());
    }

    private String getPrivacyTagFromField(final Descriptors.FieldDescriptor field) {
        if (field.getOptions() == null || field.getOptions().getAllFields().isEmpty()) {
            return "";
        }

        return field.getOptions().getAllFields().values().stream()
                .filter(value -> value instanceof FieldInfoOption)
                .map(value -> (FieldInfoOption) value)
                .filter(FieldInfoOption::hasPiiPrivacyTag)
                .map(FieldInfoOption::getPiiPrivacyTag)
                .map(Object::toString)
                .findFirst()
                .orElse("");
    }

    private boolean isValidPrivacyTag(final String privacyTag) {
        return privacyTag != null && !privacyTag.isEmpty();
    }
}

private String getPrivacyTagFromField(final Descriptors.FieldDescriptor field) {
    if (field.getOptions() == null || field.getOptions().getAllFields().isEmpty()) {
        return "";
    }

    return field.getOptions().getAllFields().values().stream()
            .filter(value -> value instanceof FieldInfoOption)
            .map(value -> (FieldInfoOption) value)
            .map(FieldInfoOption::getPiiPrivacyTag) // Directly get the tag
            .map(Object::toString)
            .filter(tag -> !tag.isEmpty()) // Ensure it's not empty
            .findFirst()
            .orElse("");
}

